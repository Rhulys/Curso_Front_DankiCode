{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
    -- React Basics --\
\
    import React from 'react' : Importa o React para usar em um componente.\
    import ReactDOM from 'react-dom' : Importa o ReactDOM para renderizar componentes React no DOM.\
\
    -- Componentes --\
\
    function Componente() \{ return <div>Conte\'fado</div>; \} : Define um componente funcional.\
    class Componente extends React.Component \{ render() \{ return <div>Conte\'fado</div>; \} \} : Define um componente de classe.\
\
    -- JSX (JavaScript XML) --\
\
    JSX : Sintaxe que permite escrever HTML dentro do JavaScript.\
    const elemento = <h1>Ol\'e1, mundo!</h1>; : Define um elemento JSX.\
\
    -- Renderiza\'e7\'e3o de Componentes --\
\
    ReactDOM.render(<Componente />, document.getElementById('root')); : Renderiza um componente React dentro de um elemento DOM.\
\
    -- Props --\
\
    function Componente(props) \{ return <h1>\{props.nome\}</h1>; \} : Acessa propriedades passadas para um componente.\
    <Componente nome="Mundo" /> : Passa a propriedade 'nome' para o componente.\
\
    -- State --\
\
    class Componente extends React.Component \{\
        constructor(props) \{\
            super(props);\
            this.state = \{ contador: 0 \};\
        \}\
        render() \{\
            return <h1>\{this.state.contador\}</h1>;\
        \}\
    \} : Define e acessa o estado em um componente de classe.\
\
    const [contador, setContador] = React.useState(0); : Define e acessa o estado em um componente funcional usando o Hook useState.\
\
    -- Eventos --\
\
    function Componente() \{\
        function handleClick() \{\
            alert('Clicado!');\
        \}\
        return <button onClick=\{handleClick\}>Clique em mim</button>;\
    \} : Define e usa um manipulador de eventos em um componente funcional.\
\
    -- Hooks --\
\
    useState : Hook que permite adicionar estado a componentes funcionais.\
    useEffect : Hook que executa efeitos colaterais em componentes funcionais.\
    \
    import React, \{ useState, useEffect \} from 'react'; : Importa Hooks do React.\
\
    useEffect(() => \{ document.title = `Voc\'ea clicou $\{contador\} vezes`; \}, [contador]); : Executa um efeito colateral baseado no valor de `contador`.\
\
    -- Componentes de Ciclo de Vida --\
\
    componentDidMount() : M\'e9todo chamado ap\'f3s o componente ser montado.\
    componentDidUpdate(prevProps, prevState) : M\'e9todo chamado ap\'f3s o componente ser atualizado.\
    componentWillUnmount() : M\'e9todo chamado antes do componente ser desmontado.\
\
    -- Context API --\
\
    const MeuContexto = React.createContext(); : Cria um contexto.\
    <MeuContexto.Provider value=\{/* valor */\} > : Provedor de contexto.\
    <MeuContexto.Consumer> \{ valor => /* renderiza algo baseado no valor */ \} </MeuContexto.Consumer> : Consumidor de contexto.\
\
    -- React Router --\
\
    import \{ BrowserRouter as Router, Route, Link, Switch \} from 'react-router-dom'; : Importa componentes de roteamento.\
\
    <Router>\
        <nav>\
            <ul>\
                <li><Link to="/">Home</Link></li>\
                <li><Link to="/sobre">Sobre</Link></li>\
            </ul>\
        </nav>\
        <Switch>\
            <Route path="/sobre">\
                <Sobre />\
            </Route>\
            <Route path="/">\
                <Home />\
            </Route>\
        </Switch>\
    </Router> : Configura o roteamento b\'e1sico.\
\
    -- Formul\'e1rios --\
\
    class MeuFormulario extends React.Component \{\
        constructor(props) \{\
            super(props);\
            this.state = \{ valor: '' \};\
            this.handleChange = this.handleChange.bind(this);\
            this.handleSubmit = this.handleSubmit.bind(this);\
        \}\
\
        handleChange(event) \{\
            this.setState(\{ valor: event.target.value \});\
        \}\
\
        handleSubmit(event) \{\
            alert('Um nome foi enviado: ' + this.state.valor);\
            event.preventDefault();\
        \}\
\
        render() \{\
            return (\
                <form onSubmit=\{this.handleSubmit\}>\
                    <label>\
                        Nome:\
                        <input type="text" value=\{this.state.valor\} onChange=\{this.handleChange\} />\
                    </label>\
                    <input type="submit" value="Enviar" />\
                </form>\
            );\
        \}\
    \} : Define um formul\'e1rio controlado com m\'e9todos de manuseio de eventos.\
\
    -- Fragmentos --\
\
    <React.Fragment> ou <> </> : Agrupa m\'faltiplos elementos sem adicionar n\'f3s extras ao DOM.\
\
    -- PropTypes --\
\
    import PropTypes from 'prop-types'; : Importa PropTypes para validar props.\
\
    Componente.propTypes = \{\
        nome: PropTypes.string,\
        idade: PropTypes.number.isRequired\
    \}; : Define tipos de prop e prop obrigat\'f3ria.\
\
    -- Renderiza\'e7\'e3o Condicional --\
\
    function Componente(\{ estaLogado \}) \{\
        return (\
            <div>\
                \{ estaLogado ? <p>Bem-vindo!</p> : <p>Por favor, fa\'e7a login.</p> \}\
            </div>\
        );\
    \} : Renderiza diferentes elementos com base em uma condi\'e7\'e3o.\
\
    -- Estilo Inline --\
\
    const estilo = \{ color: 'blue', fontSize: '20px' \};\
    <h1 style=\{estilo\}>Texto estilizado</h1>; : Aplica estilo inline a um elemento.\
\
    -- Componentes de Ordem Superior (HOC) --\
\
    function withComponenteAdicional(Componente) \{\
        return function ComponenteAdicional(props) \{\
            return <Componente \{...props\} />;\
        \};\
    \} : Define um componente de ordem superior que retorna um componente adicional.\
\
    -- Refs --\
\
    class MeuComponente extends React.Component \{\
        constructor(props) \{\
            super(props);\
            this.myRef = React.createRef();\
        \}\
\
        render() \{\
            return <div ref=\{this.myRef\}>Conte\'fado</div>;\
        \}\
    \} : Cria e usa uma refer\'eancia para acessar diretamente um elemento DOM.\
\
    -- Memoization --\
\
    import React, \{ memo \} from 'react';\
\
    const ComponenteMemoizado = memo(function Componente(\{ prop \}) \{\
        return <div>\{prop\}</div>;\
    \}); : Memoriza um componente funcional para otimizar a re-renderiza\'e7\'e3o.\
\
    -- Fetch API --\
\
    useEffect(() => \{\
        fetch('https://api.example.com/dados')\
            .then(response => response.json())\
            .then(data => setDados(data));\
    \}, []); : Faz uma requisi\'e7\'e3o HTTP dentro de um hook useEffect.\
\
    -- Axios --\
\
    import axios from 'axios';\
\
    useEffect(() => \{\
        axios.get('https://api.example.com/dados')\
            .then(response => setDados(response.data));\
    \}, []); : Faz uma requisi\'e7\'e3o HTTP usando Axios dentro de um hook useEffect.\
\
    -- Boa Pr\'e1tica --\
\
    Quebre componentes grandes em componentes menores e reutiliz\'e1veis.\
    Use Hooks para gerenciar estado e efeitos colaterais em componentes funcionais.\
    Use Context API para gerenciar estado global.\
    Use PropTypes para validar props e garantir que seu componente receba os dados corretos.\
*/\
}